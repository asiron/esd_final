#include "implementation.oil"

CPU ARM
{
  OS EPLABO_OSEK
  {
    STATUS = EXTENDED;
    STARTUPHOOK = TRUE;
    ERRORHOOK = FALSE;
    SHUTDOWNHOOK = TRUE;
    PRETASKHOOK = FALSE;
    POSTTASKHOOK = FALSE;
    USEGETSERVICEID = FALSE;
    USEPARAMETERACCESS = FALSE;
    USERESSCHEDULER = FALSE;
  };

  /* Definition of application mode */
  APPMODE appmode1{}; 

  EVENT DummyEvent {
    MASK = AUTO;
  };

  TASK SonarSensorTask
  {
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };
    PRIORITY = 6;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    MESSAGE = SonarSensorValueMsgSendForDataValidationTask;
    MESSAGE = SonarSensorValueMsgSendForDataProcessingTask;
  }; 

  TASK DataProcessingTask
  {
    AUTOSTART = FALSE;
    PRIORITY = 3;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    MESSAGE = SonarSensorValueMsgReceiveForDataProcessingTask;
    MESSAGE = DataValidationResultMsgReceive;
    MESSAGE = MotorCommandMsgSendForOutputProcessingTask;
    EVENT = DummyEvent;
  };

  TASK DataValidationTask
  {
    AUTOSTART = FALSE;
    PRIORITY = 4;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    MESSAGE = SonarSensorValueMsgReceiveForDataValidationTask;
    MESSAGE = DataValidationResultMsgSend;
  };

  TASK OutputProcessingTask
  {
    AUTOSTART = FALSE;
    PRIORITY = 5;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    MESSAGE = MotorCommandMsgReceiveForOutputProcessingTask;
    MESSAGE = MotorCommandMsgSendForMonitorTask;
  };

  TASK MonitorTask
  {
    AUTOSTART = FALSE;
    PRIORITY = 7;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    MESSAGE = MotorCommandMsgReceiveForMonitorTask;
    MESSAGE = MotorSensorValuesMsgReceive;
    EVENT = DummyEvent;
  };

  TASK MotorSensorTask
  {
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };
    PRIORITY = 8;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    MESSAGE = MotorSensorValuesMsgSend;
  }; 

  TASK LCDTask
  {
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };
    PRIORITY = 2;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
  };

  COM MYCOM {
		COMERRORHOOK = FALSE;
		COMUSEGETSERVICEID = TRUE;
		COMUSEPARAMETERACCESS = TRUE;
		COMSTARTCOMEXTENSION = FALSE;
		COMAPPMODE = "COMAPP";
  };


  /* Sonar Sensor Message 
    - value of the sonar sensor
    - unique identifer of measurement to make sure 
      that we are working with the same set of data
    - sent to Data Processing Task and Data Validation Task
  */
  MESSAGE SonarSensorValueMsgSendForDataProcessingTask
  {
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
	    CDATATYPE = "SONAR_SENSOR_MSG";
    };
  };

  MESSAGE SonarSensorValueMsgReceiveForDataProcessingTask
  {
    MESSAGEPROPERTY = RECEIVE_UNQUEUED_INTERNAL {
  	 SENDINGMESSAGE = SonarSensorValueMsgSendForDataProcessingTask;
  	 FILTER = ALWAYS;
    };
      
    NOTIFICATION = ACTIVATETASK {
  	 TASK = DataProcessingTask;
    };
  };

  MESSAGE SonarSensorValueMsgSendForDataValidationTask
  {
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
      CDATATYPE = "SONAR_SENSOR_MSG";
    };
  };

  MESSAGE SonarSensorValueMsgReceiveForDataValidationTask
  {
    MESSAGEPROPERTY = RECEIVE_UNQUEUED_INTERNAL {
     SENDINGMESSAGE = SonarSensorValueMsgSendForDataValidationTask;
     FILTER = ALWAYS;
    };
   

    NOTIFICATION = ACTIVATETASK {
     TASK = DataValidationTask;
    };
  };

  /* Motor Command Message
    - contains speed values for left and right motor
    - contains break flags  for left and right motor
    - sent to Output Processing Task from Data Processing
    - sent to Monitor Task from Output Processing Task
  */

  MESSAGE MotorCommandMsgSendForOutputProcessingTask
  {
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
      CDATATYPE = "MOTOR_COMMAND_MSG";
    };
  };

  MESSAGE MotorCommandMsgReceiveForOutputProcessingTask
  {
    MESSAGEPROPERTY = RECEIVE_UNQUEUED_INTERNAL {
     SENDINGMESSAGE = MotorCommandMsgSendForOutputProcessingTask;
     FILTER = ALWAYS;
    };
      
    NOTIFICATION = ACTIVATETASK {
     TASK = OutputProcessingTask;
    };
  };

  MESSAGE MotorCommandMsgSendForMonitorTask
  {
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
      CDATATYPE = "MOTOR_COMMAND_MSG";
    };
  };

  MESSAGE MotorCommandMsgReceiveForMonitorTask
  {
    MESSAGEPROPERTY = RECEIVE_UNQUEUED_INTERNAL {
     SENDINGMESSAGE = MotorCommandMsgSendForMonitorTask;
     FILTER = ALWAYS;
    };
    
    NOTIFICATION = SETEVENT {
      EVENT = DummyEvent;
      TASK  = MonitorTask;
    };
    
  };

  /* Data Validation Message
    - contains boolean flag for validating or not validating a measurement
    - contains unique identifier to compare with
     the one passed from Data Acquisition to Data Processing Tasks
    - sent to Data Processing Task
  */

  MESSAGE DataValidationResultMsgSend
  {
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
      CDATATYPE = "DATA_VALIDATION_RESULT_MSG";
    };
  };

  MESSAGE DataValidationResultMsgReceive
  {
    MESSAGEPROPERTY = RECEIVE_UNQUEUED_INTERNAL {
     SENDINGMESSAGE = DataValidationResultMsgSend;
     FILTER = ALWAYS;
    };
          
    NOTIFICATION = SETEVENT {
      EVENT = DummyEvent;
      TASK  = DataProcessingTask;
    };

    /*NOTIFICATION = ACTIVATETASK {
     TASK = DataProcessingTask;
    };
    */
  };
    
  /* Motor Sensor Message
   - contains values of motors revolutions
   - sent to Monitor Task
  */

  MESSAGE MotorSensorValuesMsgSend
  {
    MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
      CDATATYPE = "MOTOR_SENSOR_MSG";
    };
  };

  MESSAGE MotorSensorValuesMsgReceive
  {
    MESSAGEPROPERTY = RECEIVE_UNQUEUED_INTERNAL {
     SENDINGMESSAGE = MotorSensorValuesMsgSend;
     FILTER = ALWAYS;
    };
      
    NOTIFICATION = ACTIVATETASK {
     TASK = MonitorTask;
    };
  };

  /* Every 1 ms */
  COUNTER SysTimerCnt
  {
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 10000;
    TICKSPERBASE = 1; 
    /* One tick is equal to 1msec */ 
  };

  /* Every 10 ms */
  ALARM SonarSensorTaskTrigger
  {
    COUNTER = SysTimerCnt;
    ACTION = ACTIVATETASK
    {
      TASK = SonarSensorTask;
    };
    AUTOSTART = TRUE
    {
      ALARMTIME = 1;
      CYCLETIME = 10;
      APPMODE = appmode1;
    };
  };

  /* Every 10 ms */
  ALARM MotorSensorTaskTrigger
  {
    COUNTER = SysTimerCnt;
    ACTION = ACTIVATETASK
    {
      TASK = MotorSensorTask;
    };
    AUTOSTART = TRUE
    {
      ALARMTIME = 1;
      CYCLETIME = 10;
      APPMODE = appmode1;
    };
  };

  /* Every 30 ms */
  ALARM LCDTaskTrigger
  {
    COUNTER = SysTimerCnt;
    ACTION = ACTIVATETASK
    {
      TASK = LCDTask;
    };
    AUTOSTART = TRUE
    {
      ALARMTIME = 1;
      CYCLETIME = 30;
      APPMODE = appmode1;
    };
  };
};

